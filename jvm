1.1java垃圾回收概况
一般而言java虚拟机中不需要进行专门编写内存回收和垃圾清理代码,因为自身存在垃圾清扫工作.

1.2 回收机制java GC
一:
    确定哪些内存需要回收
 
二:
    确定什么时候需要执行GC
    
三:
    如何执行GC
1.2.1
    1.内存是如何分配的
假装有图:

堆区                虚拟机栈  本地方法栈
方法区              程  序   计  数    器

线程共享            线程私有

    1.1 程序计数器
      线程通过这个来执行哪一行的代码
      每一个程序计数器只能用来记录一个线程的行号,是线程私有的,唯一一个没有定义内存溢出的存在,因为他指向的是当前字节码指令地址
      
    1.2虚拟机栈
      一个线程的每个方法在执行的同时,都会创建一个栈帧,每个栈帧都存储局部变量表,操作站,动态链接,方法出口;在方法执行的时候,栈帧进入jvm栈中,方法执行完成后,栈帧从java虚拟中出去
      局部变量表中存储着方法的相关局部变量,他在编译是就已经确定好的
    
    1.3 本地方法栈
      本地方法栈跟虚拟机栈差不多,唯一区别的是虚拟机栈是执行java方法的,而本地方法栈是用来执行native方法的.native方法是用来执行不在java坏境中的代码,或者说当想在java
中用到其他语言这是就需要用native来修饰

    1.4堆区
      读取的存在是为了存储对象实力,一般来说所有对象都在堆区上分配了内存,一般规定堆内存在逻辑上是连续的,在物理上不;
要,如果在执行垃圾回收之后,仍没有足够内存分配,将会抛出 OutOfMemoryError:Java heap space;

    1.5方法区
      方法区:是各个线程共享的区域,用来存储被虚拟机加载的类所需要的信息(比如类的版本,方法,field,接口),final常量,静态变量,编译器即时编译的代码等.
     在物理上也不要是连续的,与堆区别的一点是,方法区可以选择执行垃圾收集;
    1.6 直接内存
      比如你有4G的内存,而JVM占了1G,那么3G就是你的直接内存.
    
    
    2.java对象的访问方式
      一个java的引用设计到3个方面,JVM栈,堆,方法区
      Object obj=new Object();
      Object obj表示一个本地引用,存储在JVM的本地变量表中,
      new Object()作为实例对象数据存储在堆中
      堆中还记录了Object类的类型信息(接口,方法,field,对象类型)的地址,这些地址所执行的数据在方法区;
      
      2.1
        通过句柄访问;在堆中会设置一个句柄池,在这个池内存储相关数据的实例数据地址,比如一个本地变量,他在句柄池中会有一个
    数据存储,这个数据会存储这个数据的在实例池中的地址和在方法区内对象类型数据的地址;
      
      2.2
        通过直接指针访问:比如一个本地变量,他存储的是对象在对重的实际地址,在对重存储的对象,包含了在方法去中的相应类型数据(或者说地址指针);
      
      3.java内存分配机制
        在回收机制中,对象根据存活的时间分为年轻代,年老代,和永久代(方法区);年轻代的垃圾回收(GC)被称为Minor GC
        年轻代:对象在创建的时候首先发生在年轻代,大部分是创建了就不再使用,可以分为3个区
        Eden,Survivor0,survivor1
       
       3.1
          1.绝大多数刚创建的对象会被分配在Eden区,其中大多数对象很快就会消亡.Eden区是连续的内存空间,因此
          在其上分配内存极快
          
          2.最开始,当Eden区满的时候,执行Minor GC,将消亡的对象清理掉,并将剩余的对象复制到一个存活区Svivor0(此时Suivor1是空白的,两个
          必须有一个是空白)
          
          3.下次Eden区满了,在执行一次Minor GC,讲消亡的对象清理掉,讲存活的对象复制到SUrvivor1中,然后清空Eden
          并且将Survivor0中消亡的对象清理掉,讲其中可以晋级的对象晋级到old区,讲存活的对象也复制到Survivor1区,然后清空Survivor0;
      
      
       
    
      
      
      
